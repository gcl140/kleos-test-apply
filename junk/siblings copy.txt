{% load widget_tweaks %}
<br>
<form hx-post="{% url 'create_sibling' %}" hx-target="#sibling-list" hx-swap="beforeend"
      hx-on::after-request="this.remove()" hx-trigger="click from:#submit-all">
    <div class="row g-3">
        <div class="col-12 col-md-4">
            <label for="{{ form.sibling_name.id_for_label }}" class="form-label fw-bold">
                {{ form.sibling_name.label }}
            </label>
            {{ form.sibling_name|add_class:"form-control" }}
        </div>
        <div class="col-12 col-md-4">
            <label for="{{ form.age.id_for_label }}" class="form-label fw-bold">
                {{ form.age.label }}
            </label>
            {{ form.age|add_class:"form-control" }}
        </div>
        <div class="col-12 col-md-4">
            <label for="{{ form.education.id_for_label }}" class="form-label fw-bold">
                {{ form.education.label }}
            </label>
            {{ form.education|add_class:"form-control" }}
        </div>
        <div class="col-12 col-md-4">
            <label for="{{ form.institute.id_for_label }}" class="form-label fw-bold">
                {{ form.institute.label }}
            </label>
            {{ form.institute|add_class:"form-control" }}
        </div>
        <div class="col-12 col-md-4">
            <label for="{{ form.degree.id_for_label }}" class="form-label fw-bold">
                {{ form.degree.label }}
            </label>
            {{ form.degree|add_class:"form-control" }}
        </div>
        <div class="col-12 col-md-4">
            <label for="{{ form.occupation.id_for_label }}" class="form-label fw-bold">
                {{ form.occupation.label }}
            </label>
            {{ form.occupation|add_class:"form-control" }}
        </div>

        <div class="col-3 align-self-end">
            <button type="button" class="btn btn-danger" hx-on:click="this.closest('form').remove()">
                Cancel
            </button>
        </div>
    </div>
</form>

path('addactivities/', views.addactivities, name='addactivities'),
path('create_activity/', views.create_activity, name='create_activity'),
path('update_activity/<int:activity_id>/', views.update_activity, name='update_activity'), 
path('delete_activity/<int:activity_id>/', views.delete_activity, name='delete_activity'),



def adddistinctions(request):
    application = get_application_for_user(request.user)
    
    context = {
        'form': DistinctionForm,
        'distinctions': Distinction.objects.filter(application=application)
    }
    return render(request, 'applications/adddistinctions.html', context)

def create_distinction(request):
    if request.method == "POST":
        form = DistinctionForm(request.POST)
        if form.is_valid():
            application = get_application_for_user(request.user)
            distinction = form.save(commit=False)
            distinction.application = application
            distinction.save()  
            context = {'distinction': distinction}
            return render(request, 'partials/distinctions_list.html', context)
    else:
        form = DistinctionForm()

    return render(request, 'partials/distinctions.html', {'form': form})

def update_distinction(request, distinction_id):
    distinction = get_object_or_404(Distinction, id=distinction_id)
    
    if request.method == 'POST':
        form = DistinctionForm(request.POST, instance=distinction)  # Populate form with the existing distinction
        if form.is_valid():
            form.save()
            messages.success(request, "Changes saved successfully!")
            return redirect('adddistinctions')
    else:
        form = DistinctionForm(instance=distinction)
    context = {'form': form}
    return render(request, 'partials/distinctions_update.html', context)




def delete_distinction(request, distinction_id):
    distinction = get_object_or_404(Distinction, id=distinction_id)
    application = get_application_for_user(request.user)
    if distinction.application == application:
        distinction.delete()
    messages.success(request, "distinction deleted successfully!")
    return redirect('adddistinctions')

def adddependents(request):
    application = get_application_for_user(request.user)
    
    context = {
        'form': DependentForm,
        'dependents': Dependent.objects.filter(application=application)
    }
    return render(request, 'applications/adddependents.html', context)

def create_dependent(request):
    if request.method == "POST":
        form = DependentForm(request.POST)
        if form.is_valid():
            application = get_application_for_user(request.user)
            dependent = form.save(commit=False)
            dependent.application = application
            dependent.save()  
            context = {'dependent': dependent}
            return render(request, 'partials/dependents_list.html', context)
    else:
        form = DependentForm()

    return render(request, 'partials/dependents.html', {'form': form})

def update_dependent(request, dependent_id):
    dependent = get_object_or_404(Dependent, id=dependent_id)
    
    if request.method == 'POST':
        form = DependentForm(request.POST, instance=dependent)  # Populate form with the existing dependent
        if form.is_valid():
            form.save()
            messages.success(request, "Changes saved successfully!")
            return redirect('adddependents')
    else:
        form = DependentForm(instance=dependent)
    context = {'form': form}
    return render(request, 'partials/dependents_update.html', context)

def delete_dependent(request, dependent_id):
    dependent = get_object_or_404(Dependent, id=dependent_id)
    application = get_application_for_user(request.user)
    if dependent.application == application:
        dependent.delete()
    messages.success(request, "Dependent deleted successfully!")
    return redirect('adddependents')


def addactivities(request):
    application = get_application_for_user(request.user)
    
    context = {
        'form': ActivityForm,
        'activities': Activity.objects.filter(application=application)
    }
    return render(request, 'applications/addactivities.html', context)

def create_activity(request):
    if request.method == "POST":
        form = ActivityForm(request.POST)
        if form.is_valid():
            application = get_application_for_user(request.user)
            activity = form.save(commit=False)
            activity.application = application
            activity.save()  
            context = {'activity': activity}
            return render(request, 'partials/activities_list.html', context)
    else:
        form = ActivityForm()

    return render(request, 'partials/activities.html', {'form': form})

def update_activity(request, activity_id):
    activity = get_object_or_404(Activity, id=activity_id)
    
    if request.method == 'POST':
        form = ActivityForm(request.POST, instance=activity)  # Populate form with the existing activity
        if form.is_valid():
            form.save()
            messages.success(request, "Changes saved successfully!")
            return redirect('addactivities')
    else:
        form = ActivityForm(instance=activity)
    context = {'form': form}
    return render(request, 'partials/activities_update.html', context)




def delete_activity(request, activity_id):
    activity = get_object_or_404(Activity, id=activity_id)
    application = get_application_for_user(request.user)
    if activity.application == application:
        activity.delete()
    messages.success(request, "Activity deleted successfully!")
    return redirect('addactivities')

















    def create_distinction(request):
    if request.method == "POST":
        form = DistinctionForm(request.POST)
        if form.is_valid():
            application = get_application_for_user(request.user)
            distinction = form.save(commit=False)
            distinction.application = application
            distinction.save()  
            context = {'distinction': distinction}
            return render(request, 'partials/distinctions_list.html', context)
    else:
        form = DistinctionForm()

    return render(request, 'partials/distinctions.html', {'form': form})
